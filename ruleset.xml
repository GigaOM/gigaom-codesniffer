<?xml version="1.0"?>
<ruleset name="Gigaom">
	<description>Gigaom coding standards.</description>
	<exclude-pattern>*/.git/*</exclude-pattern>
	<exclude-pattern>*/.svn/*</exclude-pattern>
	<exclude-pattern>*/external/*</exclude-pattern>

	<!-- Reports errors if the same class or interface name is used in multiple files. -->
	<rule ref="Generic.Classes.DuplicateClassName"/>

	<!--  This sniff implements the common algorithm for empty statement body detection. A body is considered as empty if it is completely empty or it only contains whitespace characters and|or comments. -->
	<rule ref="Generic.CodeAnalysis.EmptyStatement"/>

	<!-- Detects for-loops that use a function call in the test expression. -->
	<rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>

	<!--  Detects incrementer jumbling in for loops. -->
	<rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>

	<!-- Detects unconditional if- and elseif-statements. -->
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>

	<!-- Detects unnecessary final modifiers inside of final classes. -->
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>

	<!-- Warns about FIXME comments. -->
	<rule ref="Generic.Commenting.Fixme"/>

	<!-- Warns about TODO comments. -->
	<rule ref="Generic.Commenting.Todo"/>

	<!-- Runs jshint.js on the file. -->
	<rule ref="Generic.Debug.JSHint"/>

	<!-- A simple sniff for detecting BOMs that may corrupt application work. -->
	<rule ref="Generic.Files.ByteOrderMark"/>

	<!-- Checks that end of line characters are correct. -->
	<!-- All PHP files MUST use the Unix LF (linefeed) line ending. -->
	<rule ref="Generic.Files.LineEndings">
		<properties>
			<property name="eolChar" value="\n"/>
		</properties>
	</rule>

	<!-- Ensures each statement is on a line by itself. -->
	<!-- NOTE: Disabling due to the fact this causes html templates with multiple PHP statements to error out -->
	<!-- rule ref="Generic.Formatting.DisallowMultipleStatements"/ -->

	<!-- Ensures there is a single space after cast tokens. -->
	<rule ref="Generic.Formatting.SpaceAfterCast"/>

	<!-- Checks that calls to methods and functions are spaced correctly. -->
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>

	<!-- Checks that the opening brace of a function is on the line after the function declaration. -->
	<rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>

	<!-- Checks the nesting level for methods. -->
	<rule ref="Generic.Metrics.NestingLevel"/>

	<!-- Favor PHP 5 constructor syntax, which uses "function __construct()". -->
	<rule ref="Generic.NamingConventions.ConstructorName"/>

	<!-- Ensures that constant names are all uppercase. -->
	<rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

	<!-- Discourages the use of deprecated functions that are kept in PHP for compatibility with older versions.  -->
	<rule ref="Generic.PHP.DeprecatedFunctions"/>

	<!-- Makes sure that shorthand PHP open tags are not used. -->
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>

	<!-- Discourages the use of alias functions that are kept in PHP for compatibility with older versions. Can be used to forbid the use of any function. -->
	<rule ref="Generic.PHP.ForbiddenFunctions"/>

	<!-- Checks that two strings are not concatenated together; suggests using one string instead. -->
	<rule ref="Generic.Strings.UnnecessaryStringConcat"/>

	<!-- Checks the declaration of the class and its inheritance is correct. -->
	<rule ref="PSR2.Classes.ClassDeclaration"/>

	<!-- Verifies that there are no else if statements. Elseif should be used instead. -->
	<rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>

	<!-- Checks the declaration of the class is correct. -->
	<rule ref="PEAR.Classes.ClassDeclaration"/>

	<!-- Checks that no perl-style comments are used. -->
	<rule ref="PEAR.Commenting.InlineComment"/>

	<!-- A Sniff to ensure that parameters defined for a function that have a default value come at the end of the function signature. -->
	<rule ref="PEAR.Functions.ValidDefaultValue"/>

	<!-- Ensures all class keywords are lowercase. -->
	<rule ref="Squiz.Classes.LowercaseClassKeywords"/>

	<!-- Tests self member references. -->
	<rule ref="Squiz.Classes.SelfMemberReference"/>

	<!-- Ensures all control structure keywords are lowercase. -->
	<rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>

	<!-- Checks that duplicate arguments are not used in function declarations. -->
	<rule ref="Squiz.Functions.FunctionDuplicateArgument"/>

	<!-- Ensures all class keywords are lowercase. -->
	<rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

	<!-- Checks to ensure that the logical operators 'and' and 'or' are not used. -->
	<!-- Use the && and || operators instead. -->
	<rule ref="Squiz.Operators.ValidLogicalOperators"/>

	<!-- The use of eval() is discouraged. -->
	<rule ref="Squiz.PHP.Eval"/>

	<!-- Ensures all calls to inbuilt PHP functions are lowercase. -->
	<rule ref="Squiz.PHP.LowercasePHPFunctions"/>

	<!-- Makes sure that any strings that are "echoed" are not enclosed in brackets like a function call. -->
	<rule ref="Squiz.Strings.EchoedStrings"/>

	<!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
		<severity>0</severity>
	</rule>

	<!-- Visibility MUST be declared on all methods. -->
	<rule ref="Squiz.Scope.MethodScope"/>
	<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

	<!-- The closing ?> tag MUST be omitted from files containing only PHP. -->
	<rule ref="Zend.Files.ClosingTag"/>

	<!-- Ensures filenames do not contain underscores -->
	<rule ref="WordPress.Files.FileName"/>

	<!-- Enforces WordPress function argument format -->
	<rule ref="WordPress.Functions.FunctionDeclarationArgumentSpacing"/>

	<!-- Checks that methods are named appropriately -->
	<rule ref="WordPress.NamingConventions.ValidFunctionName"/>

	<!-- Makes sure that any use of Double Quotes ("") are warranted. -->
	<rule ref="Squiz.Strings.DoubleQuoteUsage"/>
	<rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
		<severity>0</severity>
	</rule>

	<!-- Test for escaping the way VIP does. -->
	<rule ref="WordPress.XSS.EscapeOutput"/>
</ruleset>
